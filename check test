@mock.patch(
    "functions.transcribe_on_request_POST.transcribe_on_request_POST_handler.get_user_groups"
)
@mock.patch(
    "functions.transcribe_on_request_POST.transcribe_on_request_POST_handler.event_parser.extract_credentials"
)
def test_handler_valid_call_id(
    mock_extract_credentials,
    mock_get_user_groups,
    event_with_user,
    create_dynamodb_client_function,
    create_es_client_function,
    dynamodb,
    create_sqs_client_function,
):
    # Mock user credentials
    mock_extract_credentials.return_value = {
        "access_key": "mock_access_key",
        "secret_key": "mock_secret_key",
        "token": "mock_token",
    }

    # Include es_create_query here
    es_create_query = {
        "bool": {
            "must": [
                {"range": {"created_at_": {"gte": "now-1y"}}},
                {"terms": {"_id": ["7654321", "1234567"]}},
                {"match": {"transcribed": False}},
            ]
        }
    }

    # Mock Elasticsearch search_documents to use es_create_query
    create_es_client_function.return_value.search_documents = MagicMock(
        return_value={
            "hits": {
                "total": {"value": 1, "relation": "eq"},
                "hits": [
                    {                    {
                        "_index": "call-details-000001",
                        "_type": "_doc",
                        "_id": "7654321",
                        "_score": 4.227655,
                        "_source": {
                            "original_contact_id": "9149195935190001661",
                            "extension": "1534749",
                            "customer_phone_number": "8676959617",
                            "agent_email": "anand.mistry@belairdirect.com",
                            "distributor_number": "BNA",
                            "created_at_": "2024-01-10T15:07:03.979127+00:00",
                            "start_datetime": "2024-01-10T15:02:12.507261+00:00",
                            "end_datetime": "2021-11-25T16:27:28.300000+00:00",
                            "video_recorded": False,
                            "call_direction": "1",
                            "language": "F",
                            "organization_unit": "- Ammar Shabbir",
                            "duration": 600,
                            "agent_full_name": "Anand Mistry",
                            "filename_prefix": "10-01-2024_10-02-12_sid_7654321_dbsid_719",
                            "call_context": "ACQ",
                            "company_number": "010",
                            "line_of_business": "RE",
                            "total_hold_time": 0,
                            "agent_pbxid": "34749",
                            "region": "YT",
                            "queue_id": "1877122",
                        },
                    },
                    {
                        "_index": "call-details-000001",
                        "_type": "_doc",
                        "_id": "1234567",
                        "_score": 4.227655,
                        "_source": {
                            "original_contact_id": "9149193817430001661",
                            "extension": "1546752",
                            "customer_phone_number": "5147228029",
                            "agent_email": "alyssa.ficher@belairdirect.com",
                            "distributor_number": "BEL",
                            "created_at_": "2024-01-10T15:07:02.782256+00:00",
                            "start_datetime": "2024-01-10T15:02:13.157913+00:00",
                            "end_datetime": "2021-11-25T16:27:28.300000+00:00",
                            "video_recorded": False,
                            "call_direction": "1",
                            "language": "F",
                            "organization_unit": "- Ammar Shabbir",
                            "duration": 600,
                            "agent_full_name": "Alyssa Ficher",
                            "filename_prefix": "10-01-2024_10-02-13_sid_1234567_dbsid_719",
                            "call_context": "LOY",
                            "company_number": "010",
                            "line_of_business": "AUP",
                            "total_hold_time": 0,
                            "agent_pbxid": "46752",
                            "region": "CAN",
                            "queue_id": "",
                        },
                    },
                ],
            },
        }
    )

    # Mock user groups to simulate user with rights
    mock_get_user_groups.return_value = [
        PermissionGroup(
            id=GROUP_1_NAME,
            name=GROUP_1_NAME,
            description="Test group description",
            distributors=["BEL", "BNA"],
            linesOfBusiness=["RE", "AUP"],
        )
    ]

    # Build the handler
    handler = build_handler(
        create_dynamodb_client_fn=create_dynamodb_client_function,
        create_es_client_fn=create_es_client_function,
        create_sqs_client_fn=create_sqs_client_function,
    )

    # Invoke the handler
    response = handler(event_with_user, {})

    # Assert that the response status is 201 (Created)
    assert_status_code(response, 201)
    # Assert that the response body contains the provided call IDs
    assert_body(response, event_with_user["body"])

    dynamo_items = dynamodb.scan(TableName=TRANSCRIBE_ON_REQUEST_STATUS_TABLE)
    assert len(dynamo_items["Items"]) == 2

    sqs_messages = get_all_messages(sqs_client=sqs, queue_url=SQS_QUEUE_URL)

    for index, value in enumerate(es_query_response["hits"]["hits"]):
        # Validate the item in DynamoDB
        assert dynamo_items["Items"][index]["callId"] == {"S": value["_id"]}

        # Validate if messages were published to SQS
        sqs_message = json.loads(sqs_messages[index])["Records"][0]
        assert sqs_message["sid"] == value["_id"]
        assert "on_request_job_id" in sqs_message
        assert (
            sqs_message["wav_url"]
            == f"s3://{AUDIO_SOURCE_BUCKET}/{AUDIO_SOURCE_PREFIX}/{value['_source']['filename_prefix']}.wav"
        )
        assert sqs_message["on_request_job_user"] == "test.user@intact.net"
        assert_same_dict(
            sqs_message,
            value["_source"],
            ["on_request_job_id", "wav_url", "on_request_job_user", "sid"],
        )

