@mock.patch("functions.transcribe_on_request_POST.transcribe_on_request_POST_handler.jwt.get_unverified_claims")
@mock.patch(
    "functions.transcribe_on_request_POST.transcribe_on_request_POST_handler.get_user_groups"
)
@mock.patch(
    "functions.transcribe_on_request_POST.transcribe_on_request_POST_handler.event_parser.extract_credentials"
)
def test_handler_user_without_rights(
    mock_extract_credentials,
    mock_get_user_groups,
    mock_get_unverified_claims,  # Add this line
    event_with_user,
    create_dynamodb_client_function,
    create_es_client_function,
    create_sqs_client_function,
):
    # Mock JWT decoding
    mock_get_unverified_claims.return_value = {
        "sub": "1234567890",
        "name": "John Doe",
        "iat": 1516239022,
    }

    # Modify the event_with_user fixture to combine cookies into a single string
    event_with_user["headers"]["cookie"] = "CQ:access_token=test_access_token; CQ:identity=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"

    # Mock user credentials
    mock_extract_credentials.return_value = {
        "access_key": "mock_access_key",
        "secret_key": "mock_secret_key",
        "token": "mock_token",
    }

    # Mock user groups to simulate user without rights
    mock_get_user_groups.return_value = ["NoAccessGroup"]

    # Mock the Elasticsearch client's `validate_user_access` to raise AccessDeniedError
    es_client_mock = MagicMock()
    es_client_mock.validate_user_access.side_effect = AccessDeniedError("User does not have access to transcribe calls.")
    create_es_client_function.return_value = es_client_mock

    # Build the handler
    handler = build_handler(
        create_dynamodb_client_fn=create_dynamodb_client_function,
        create_es_client_fn=create_es_client_function,
        create_sqs_client_fn=create_sqs_client_function,
    )

    # Invoke the handler and assert AccessDeniedError is raised
    with pytest.raises(AccessDeniedError) as excinfo:
        handler(event_with_user, {})

    # Assert the error message
    assert "User does not have access to transcribe calls." in str(excinfo.value)
