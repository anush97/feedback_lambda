chnages 2 -

import copy
import json
import logging
import os
import warnings
from typing import Dict

import boto3
from requests import Session, Response
from requests_aws4auth import AWS4Auth
from requests.exceptions import HTTPError

from common.search_query_template import OrderField
from common.std_ext import NullObject
from common.errors import AccessDeniedError, ElasticsearchFailedRequestError  # Ensure these are imported

# Set log level to INFO
log_level = os.environ.get("LOG_LEVEL", "INFO")
logging.root.setLevel(logging.getLevelName(log_level))
_logger = logging.getLogger(__name__)

AWS_REGION = "ca-central-1"
ES_HEADERS = {"Content-Type": "application/json"}

def append_order_by(query_dict: dict, order_field: OrderField) -> dict:
    query_sort = {
        order_field.field: {
            "order": order_field.direction,
            "missing": order_field.missing,
        }
    }
    query_dict["sort"] = [query_sort]
    return query_dict

def offset_paginator_factory(limit=10, strategy="offset"):
    def append_pagination_with_from_size(query_dict, offset=0):
        query_dict["size"] = limit
        query_dict["from"] = offset
        return query_dict

    if strategy == "offset":
        return append_pagination_with_from_size

class ElasticSearchV2:
    def __init__(
        self, host: str, auth: AWS4Auth | Dict = None, use_ssl: bool = True, logger=None
    ):
        if logger is None:
            logger = NullObject()

        protocol = "https" if use_ssl else "http"
        self.es_url = f"{protocol}://{host}"
        self.logger = logger
        # Ensure that user credentials are provided and valid
        self.auth = self.__ensure_auth(auth)
        self.session = self.__create_session(self.auth)

    def __ensure_auth(self, auth: AWS4Auth | Dict) -> AWS4Auth | Dict:
        """Ensure valid authentication for Elasticsearch."""
        if not auth or isinstance(auth, NullObject):
            self.logger.error("User credentials are required and were not provided.")
            raise ValueError("Elasticsearch user credentials are required.")
        else:
            self.logger.info("User credentials provided for Elasticsearch.")
            return auth

    def __create_session(self, auth: AWS4Auth | Dict = None) -> Session:
        session = Session()
        session.headers = ES_HEADERS
        session.auth = auth
        return session

    def __request(self, verb: str, endpoint: str, body: Dict = None) -> Response:
        if body is not None:
            body = json.dumps(body)

        self.logger.info("Elasticsearch request: %s %s/%s", verb, self.es_url, endpoint)
        self.logger.info("Elasticsearch body: %s", body)

        try:
            response = self.session.request(
                method=verb, url=f"{self.es_url}/{endpoint}", data=body
            )
            response.raise_for_status()
        except HTTPError as http_err:
            self.logger.error(f"HTTP error occurred: {http_err}")
            if response.status_code == 403:
                raise AccessDeniedError("403 Forbidden: Access to Elasticsearch denied.")
            else:
                raise ElasticsearchFailedRequestError(
                    f"HTTP error {response.status_code} from Elasticsearch: {response.text}"
                )
        except Exception as e:
            self.logger.error(f"Elasticsearch error: {e}")
            raise ElasticsearchFailedRequestError(f"Error with Elasticsearch server: {str(e)}")

        return response

    def validate_user_access(self, user_groups: list) -> bool:
        """Validate if the user has access to transcribe calls."""
        try:
            # Construct an Elasticsearch query to check user's group access
            query = {
                "query": {
                    "bool": {
                        "should": [
                            {"terms": {"user_group": user_groups}}
                        ]
                    }
                },
                "size": 1  # Limit to 1 to quickly check if access exists
            }
            # Query Elasticsearch for access validation
            response = self.__request(verb="GET", endpoint=f"{self.es_url}/access-rights/_search", body=query)
            es_response = json.loads(response.text)
            
            # If hits are found, user group has access
            if es_response["hits"]["total"]["value"] > 0:
                return True

            # Log and return False if the user doesn't have access
            self.logger.error("User does not have the rights to transcribe calls.")
            return False

        except Exception as e:
            self.logger.error(f"Error during user group access validation: {e}")
            return False

def create_es_client(host: str, user_groups: list, auth: AWS4Auth | Dict, use_ssl: bool = True, logger=None) -> ElasticSearchV2:
    """Creates an Elasticsearch client and performs early access validation."""
    es_client = ElasticSearchV2(host=host, auth=auth, use_ssl=use_ssl, logger=logger)
    
    # Perform early access validation
    if not es_client.validate_user_access(user_groups):
        raise AccessDeniedError("User group does not have access to transcribe calls.")
    
    return es_client
----------

import json
import logging
import os
import uuid
from datetime import datetime

from common import event_parser
from common.admin.dynamodb_mapper import (
    create_dynamodb_client,
    DynamoDBMapper,
)
from common.call_access_restriction_utils import (
    get_user_groups,
    CallAccessRestrictionQueryParameter,
)
from common.config import validate_env_variables
from common.decorator import lambda_handler, User
from common.elasticsearch import ElasticSearchV2, create_es_client
from common.errors import (
    AccessDeniedError,
    ValidationError,
    ConfigurationError,
    SQSError,
    ElasticsearchFailedRequestError,  # Add this import if not already present
)
from common.sqs_adapter import create_sqs_client, SQSAdapter
from .on_request_job_publisher import OnRequestJobPublisher
from .on_request_job_updater import OnRequestJobUpdater

logger = logging.getLogger("transcribe-on-request-post-logger")
logger.setLevel(os.environ.get("LOG_LEVEL", "INFO"))


def validate_calls_id_es(
    es_client: ElasticSearchV2,
    es_index: str,
    call_ids: list,
    call_access_restriction_query: dict,
) -> None:
    call_ids_set = set(call_ids)
    query = {
        "_source": ["_id"],
        "query": {
            "bool": {
                "must": [
                    {"range": {"created_at_": {"gte": "now-1y"}}},
                    {"terms": {"_id": call_ids}},
                    {"match": {"transcribed": False}},
                    call_access_restriction_query,
                ]
            }
        },
        "size": len(call_ids),
    }
    
    try:
        es_response = es_client.search_documents(index=es_index, query=query)
        es_call_ids = {record["_id"] for record in es_response["hits"]["hits"]}

        if es_call_ids != call_ids_set:
            invalid_call_ids = list(call_ids_set - es_call_ids)
            logger.info("Requested call_ids: %s", call_ids)
            logger.info("Invalid call_ids: %s", invalid_call_ids)
            raise ValidationError(f"Invalid call_ids: {invalid_call_ids}")
    
    except AccessDeniedError as e:
        logger.error("Access denied when querying Elasticsearch: %s", e)
        raise AccessDeniedError("Access to Elasticsearch was denied.")

    except Exception as e:
        logger.error("An error occurred while querying Elasticsearch: %s", e)
        raise ValidationError(f"Elasticsearch query failed with error: {str(e)}")


def generate_job_id() -> str:
    now = datetime.utcnow()
    return f"job_{str(uuid.uuid4())[:8]}_{now.isoformat(timespec='seconds')}"


def build_handler(create_dynamodb_client_fn, create_es_client_fn, create_sqs_client_fn):
    validate_env_variables(
        "ELASTICSEARCH_INDEX",
        "ELASTICSEARCH_HOST",
        "TRANSCRIBE_ON_REQUEST_STATUS_TABLE",
        "DAYS_TO_EXPIRE",
        "AUDIO_SOURCE_BUCKET",
        "AUDIO_SOURCE_PREFIX",
        "SQS_QUEUE_URL",
    )
    transcribe_on_request_status_table = os.environ[
        "TRANSCRIBE_ON_REQUEST_STATUS_TABLE"
    ]

    days_to_expire = int(os.environ["DAYS_TO_EXPIRE"])
    host = os.environ["ELASTICSEARCH_HOST"]
    es_index = os.environ["ELASTICSEARCH_INDEX"]

    try:
        # Assuming user-provided credentials are passed from the event (for example)
        credentials = event_parser.extract_credentials(event)
        # Get user groups early
        user_groups = get_user_groups(user.email)
        es_client = create_es_client_fn(host=host, user_groups=user_groups, auth=credentials, use_ssl=True)
    except AccessDeniedError as e:
        logger.error(f"Access denied when creating Elasticsearch client: {e}")
        raise AccessDeniedError("403 Forbidden: Access to Elasticsearch denied.")
    except ValueError as e:
        logger.error(f"Failed to create Elasticsearch client due to missing credentials: {e}")
        raise ConfigurationError("Elasticsearch client configuration failed due to missing credentials.")
    except Exception as e:
        logger.error(f"Unexpected error during Elasticsearch client creation: {e}")
        raise ConfigurationError(f"Unexpected error during Elasticsearch setup: {str(e)}")

    @lambda_handler(
        logging_fn=logger,
        error_status=(
            (AccessDeniedError, 403),
            (ValidationError, 400),
            (ConfigurationError, 500),
            (SQSError, 500),
            (ElasticsearchFailedRequestError, 500),
        ),
        require_user=True,
        sanitize=True,
    )
    def handler(event, context, user: User):
        logger.info(f"Event Received: {json.dumps(event)}")
        body = event_parser.extract_body(event)

        # Get credentials from the Transcribe Manager Cognito Group
        dynamodb_client = create_dynamodb_client_fn(credentials=credentials)
        dynamodb_mapper = DynamoDBMapper(dynamodb_client=dynamodb_client, logger=logger)
        sqs_client = create_sqs_client_fn(credentials=credentials)
        sqs_adapter = SQSAdapter(sqs_client=sqs_client, logger=logger)

        call_ids = body
        call_access_restriction_query = CallAccessRestrictionQueryParameter(
            user_groups
        ).create_query({})

        # Validate call IDs against Elasticsearch
        try:
            validate_calls_id_es(
                es_client, es_index, call_ids, call_access_restriction_query
            )
        except AccessDeniedError as e:
            logger.error(f"Access denied during Elasticsearch validation: {e}")
            raise AccessDeniedError("403 Forbidden: Access to Elasticsearch denied.")
        except ElasticsearchFailedRequestError as e:
            logger.error(f"Failed request to Elasticsearch during validation: {e}")
            raise
        except Exception as e:
            logger.error(f"Unexpected error during Elasticsearch validation: {e}")
            raise ValidationError(f"Unexpected error during call ID validation: {str(e)}")

        job_id = generate_job_id()

        # Update the DynamoDB table with the job_id and call_ids
        job_updater = OnRequestJobUpdater(
            dynamodb_mapper=dynamodb_mapper,
            dynamodb_status_table=transcribe_on_request_status_table,
            logger=logger,
        )
        job_updater(
            job_id=job_id,
            call_ids=call_ids,
            user_email=user.email,
            days_to_expire=days_to_expire,
        )

        # Publish the job to the SQS queue
        job_publisher = OnRequestJobPublisher(
            es_client=es_client, sqs_adapter=sqs_adapter, logger=logger
        )
        job_publisher(call_ids=call_ids, job_id=job_id, user_email=user.email)

        # Successful job creation of all requested call_ids
        return 201, call_ids

    return handler


if not bool(os.environ.get("TEST_FLAG", False)):
    handler = build_handler(create_dynamodb_client, create_es_client, create_sqs_client)
----------------

@mock.patch(
    "functions.transcribe_on_request_POST.transcribe_on_request_POST_handler.get_user_groups"
)
def test_handler_user_without_rights(
    mock_get_user_groups,
    create_dynamodb_client_function,
    create_es_client_function,
    create_sqs_client_function,
):
    # Mock to simulate the user does not belong to any valid group with access rights
    mock_get_user_groups.return_value = ["NoAccessGroup"]

    # Mock the Elasticsearch client's `validate_user_access` to return False
    create_es_client_function.return_value.validate_user_access = MagicMock(return_value=False)

    # Build the handler
    handler = build_handler(
        create_dynamodb_client_fn=create_dynamodb_client_function,
        create_es_client_fn=create_es_client_function,
        create_sqs_client_fn=create_sqs_client_function,
    )

    # Invoke the handler and assert AccessDeniedError is raised
    with pytest.raises(AccessDeniedError) as excinfo:
        handler(event_with_user, {})

    # Assert the error message
    assert "User group does not have access to transcribe calls." in str(excinfo.value)
