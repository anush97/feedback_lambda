/home/anushka-sharma/build/callme-backend-api/.venv/bin/python /snap/pycharm-professional/412/plugins/python-ce/helpers/coverage_runner/run_coverage.py run --omit="/snap/pycharm-professional/412/plugins/python-ce/helpers*" /snap/pycharm-professional/412/plugins/python-ce/helpers/pycharm/_jb_pytest_runner.py --path /home/anushka-sharma/build/callme-backend-api/tests/unit/transcribe_on_request_POST/test_transcribe_on_request_POST.py 
Testing started at 2:25â€¯PM ...
Launching pytest with arguments /home/anushka-sharma/build/callme-backend-api/tests/unit/transcribe_on_request_POST/test_transcribe_on_request_POST.py --no-header --no-summary -q in /home/anushka-sharma/build/callme-backend-api/tests/unit/transcribe_on_request_POST

============================= test session starts ==============================
collecting ... collected 11 items

test_transcribe_on_request_POST.py::test_build_handler 
test_transcribe_on_request_POST.py::test_missing_env_variable[ELASTICSEARCH_HOST] 
test_transcribe_on_request_POST.py::test_missing_env_variable[ELASTICSEARCH_INDEX] 
test_transcribe_on_request_POST.py::test_missing_env_variable[TRANSCRIBE_ON_REQUEST_STATUS_TABLE] 
test_transcribe_on_request_POST.py::test_missing_env_variable[DAYS_TO_EXPIRE] 
test_transcribe_on_request_POST.py::test_missing_env_variable[AUDIO_SOURCE_BUCKET] 
test_transcribe_on_request_POST.py::test_missing_env_variable[AUDIO_SOURCE_PREFIX] 
test_transcribe_on_request_POST.py::test_missing_env_variable[SQS_QUEUE_URL] 
test_transcribe_on_request_POST.py::test_handler_valid_call_id 
test_transcribe_on_request_POST.py::test_handler_user_without_rights 
test_transcribe_on_request_POST.py::test_handler_invalid_call_id 

========================= 2 failed, 9 passed in 1.16s ==========================
PASSED            [  9%]PASSED [ 18%]PASSED [ 27%]PASSED [ 36%]PASSED [ 45%]PASSED [ 54%]PASSED [ 63%]PASSED [ 72%]PASSED    [ 81%]FAILED [ 90%]
tests/unit/transcribe_on_request_POST/test_transcribe_on_request_POST.py:267 (test_handler_user_without_rights)
mock_extract_credentials = <MagicMock name='extract_credentials' id='127008577506128'>
mock_get_user_groups = <MagicMock name='get_user_groups' id='127008565250272'>
event_with_user = {'body': ['7654321', '1234567'], 'headers': {'Accept-Encoding': 'identity', 'cookie': {'CQ:access_token': 'test_access...t_key': 'mock_id_secret_key', 'id_session_token': 'mock_id_session_token', 'identity_id': 'ca-central-1:abc123', ...}}}
create_dynamodb_client_function = <MagicMock id='127008575122176'>
create_es_client_function = <MagicMock id='127008575113104'>
create_sqs_client_function = <MagicMock id='127008577516688'>

    @mock.patch(
        "functions.transcribe_on_request_POST.transcribe_on_request_POST_handler.get_user_groups"
    )
    @mock.patch(
        "functions.transcribe_on_request_POST.transcribe_on_request_POST_handler.event_parser.extract_credentials"
    )
    def test_handler_user_without_rights(
        mock_extract_credentials,
        mock_get_user_groups,
        event_with_user,
        create_dynamodb_client_function,
        create_es_client_function,
        create_sqs_client_function,
    ):
        # Mock user credentials
        mock_extract_credentials.return_value = {
            "access_key": "mock_access_key",
            "secret_key": "mock_secret_key",
            "token": "mock_token",
        }
    
        # Mock user groups to simulate user without rights
        mock_get_user_groups.return_value = ["NoAccessGroup"]
    
        # Mock the Elasticsearch client's `validate_user_access` to raise AccessDeniedError
        es_client_mock = MagicMock()
        es_client_mock.validate_user_access.side_effect = AccessDeniedError("Access to Elasticsearch denied.")
        create_es_client_function.return_value = es_client_mock
    
        # Build the handler
        handler = build_handler(
            create_dynamodb_client_fn=create_dynamodb_client_function,
            create_es_client_fn=create_es_client_function,
            create_sqs_client_fn=create_sqs_client_function,
        )
    
        # Invoke the handler and assert AccessDeniedError is raised
>       with pytest.raises(AccessDeniedError) as excinfo:
E       Failed: DID NOT RAISE <class 'common.errors.AccessDeniedError'>

test_transcribe_on_request_POST.py:305: Failed
FAILED  [100%]
tests/unit/transcribe_on_request_POST/test_transcribe_on_request_POST.py:310 (test_handler_invalid_call_id)
mock_extract_credentials = <MagicMock name='extract_credentials' id='127008572066256'>
mock_get_user_groups = <MagicMock name='get_user_groups' id='127008572074224'>
event_with_user = {'body': ['7654321', '1234567'], 'headers': {'Accept-Encoding': 'identity', 'cookie': {'CQ:access_token': 'test_access...t_key': 'mock_id_secret_key', 'id_session_token': 'mock_id_session_token', 'identity_id': 'ca-central-1:abc123', ...}}}
create_dynamodb_client_function = <MagicMock id='127008589418976'>
create_es_client_function = <MagicMock id='127008589425840'>
create_sqs_client_function = <MagicMock id='127008571877568'>

    @mock.patch(
        "functions.transcribe_on_request_POST.transcribe_on_request_POST_handler.get_user_groups"
    )
    @mock.patch(
        "functions.transcribe_on_request_POST.transcribe_on_request_POST_handler.event_parser.extract_credentials"
    )
    def test_handler_invalid_call_id(
            mock_extract_credentials,
            mock_get_user_groups,
            event_with_user,
            create_dynamodb_client_function,
            create_es_client_function,
            create_sqs_client_function,
    ):
        # Mock user credentials
        mock_extract_credentials.return_value = {
            "access_key": "mock_access_key",
            "secret_key": "mock_secret_key",
            "token": "mock_token",
        }
    
        # Mock user groups to simulate user with rights
        mock_get_user_groups.return_value = [
            PermissionGroup(
                id=GROUP_1_NAME,
                name=GROUP_1_NAME,
                description="Test group description",
                distributors=["BEL", "BNA"],
                linesOfBusiness=["RE", "AUP"],
            )
        ]
    
        # Mock Elasticsearch search_documents to return a response indicating invalid call_ids
        request_mock = MagicMock(
            return_value={
                "hits": {
                    "total": {"value": 1, "relation": "eq"},
                    "hits": [
                        {
                            "_index": "call-details-000001",
                            "_type": "_doc",
                            "_id": "7654321",
                            "_source": {},  # This ID is valid
                        }
                    ],
                },
            }
        )
        create_es_client_function.return_value.search_documents = request_mock
    
        # Build the handler
        handler = build_handler(
            create_dynamodb_client_fn=create_dynamodb_client_function,
            create_es_client_fn=create_es_client_function,
            create_sqs_client_fn=create_sqs_client_function,
        )
    
        # Invoke the handler
        response = handler(event_with_user, {})
    
        # Assert that the response status is 400 (Bad Request)
        assert_status_code(response, 400)
        # Assert the specific error message related to invalid call_ids
>       assert_error_message(response, "Invalid call_ids: ['1234567']")

test_transcribe_on_request_POST.py:374: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

response = {'body': '{"errorMessage": "Unexpected error during call ID validation: Elasticsearch query failed with error: Invalid...rity-Policy': "frame-ancestors 'none';", 'Referrer-Policy': 'strict-origin-when-cross-origin', ...}, 'statusCode': 400}
message = "Invalid call_ids: ['1234567']"

    def assert_error_message(response, message):
        payload = json.loads(response["body"])
>       assert payload["errorMessage"] == message
E       AssertionError

../lambda_assertions.py:30: AssertionError
Wrote XML report to /home/anushka-sharma/.cache/JetBrains/PyCharm2024.2/coverage/callme_backend_api$pytest_in_transcribe_on_request_POST_handler.xml

Process finished with exit code 0
